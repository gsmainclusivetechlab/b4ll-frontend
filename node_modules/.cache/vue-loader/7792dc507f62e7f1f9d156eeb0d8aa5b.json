{"remainingRequest":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/src/views/Home.vue?vue&type=template&id=0e237f34&","dependencies":[{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/src/views/Home.vue","mtime":1614840976985},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}