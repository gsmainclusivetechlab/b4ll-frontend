{"remainingRequest":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/src/views/HowItWorks.vue?vue&type=template&id=2695fb0d&","dependencies":[{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/src/views/HowItWorks.vue","mtime":1614669533721},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/fingent/Desktop/WorkSpace/B4 client/b4ll-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}